# Generated by Django 3.1.7 on 2021-03-17 05:52

from django.db import migrations, models
import random
from ..models import Page, Audio, Text, Video
from typing import Tuple

TEXT_CONTENT_FIELD_TEMPLATE_MAP = (
    ('title', 'Text block {index}'),
    ('text_field', 'Text block {index} content {index}'),
)

AUDIO_CONTENT_FIELD_TEMPLATE_MAP = (('title', 'Audio block {index}'),)
VIDEO_CONTENT_FIELD_TEMPLATE_MAP = (
    ('title', 'Video block {index}'),
    ('video_link', 'https://www.youtube.com/watch?v=-pHwBf{index}qB{index}M'),
    ('subtitle_link', 'https://www.youtube.com/pHwBf{index}qB{index}M.sub'),
)

PAGE_CONTENT_FIELD_TEMPLATE_MAP = (('title', 'Page {index}'),)


def create_simple_factory(
    model,
    field_template_map: Tuple[Tuple[str, str], ...],
    creating: bool = False,
    count_creating_instanse: int = 20,
) -> list:
    objects_list = []
    for i in range(1, count_creating_instanse + 1):
        kwargs = {field: template.format(index=i) for field, template in field_template_map}
        objects_list.append(model(**kwargs))
    if creating:
        model.objects.bulk_create(objects_list)
    return objects_list


def get_random_content_slice_block(content_blocks: list) -> list:
    end_index = random.randrange(0, len(content_blocks) - 1)
    start_index = random.randrange(0, end_index + 1)
    return content_blocks[start_index:end_index]


def create_start_fixture(apps, scema_editor):
    pages = create_simple_factory(Page, PAGE_CONTENT_FIELD_TEMPLATE_MAP, creating=True)

    for page in pages:
        text = create_simple_factory(
            Text, TEXT_CONTENT_FIELD_TEMPLATE_MAP, count_creating_instanse=10
        )
        audio = create_simple_factory(
            Audio, AUDIO_CONTENT_FIELD_TEMPLATE_MAP, count_creating_instanse=20
        )
        video = create_simple_factory(
            Video, VIDEO_CONTENT_FIELD_TEMPLATE_MAP, count_creating_instanse=10
        )
        content_blocks = (
            get_random_content_slice_block(text)
            + get_random_content_slice_block(audio)
            + get_random_content_slice_block(video)
        )
        for content in content_blocks:
            page.content.add(content, bulk=False)


class Migration(migrations.Migration):

    dependencies = [
        ('page', '0001_initial'),
    ]

    operations = [migrations.RunPython(create_start_fixture)]
